#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "Heatmap.glsl"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 8, rgba32f ) uniform image2D[] radianceOutputTexture;
layout(binding = 9, rg16f) uniform image2D[] sphericalDistanceTexture;
layout(binding = 10, rg16f) uniform image2D[] squaredDistanceTexture;
layout(binding = 1) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

layout(binding = 7) buffer LightProbePosBuffer
{ vec4 lightProbePos[];
};

layout(push_constant) uniform LightProbeConstants{

	uint lightProbeIndex;
} lightProbeCons;


layout(location = 0) rayPayloadEXT RayPayload Ray;



float signNotZero(in float k) {
    return (k >= 0.0) ? 1.0 : -1.0;
}

vec2 signNotZero(in vec2 v) {
    return vec2(signNotZero(v.x), signNotZero(v.y));
}

vec3 mapToSphere(vec2 o) {


    vec3 v = vec3(o.x, o.y, 1.0 - abs(o.x) - abs(o.y));
    if (v.z < 0.0) {
        v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
    }
    return normalize(v);
}

void main() 
{


	vec3 pixelColor = vec3(0);
	uint lightProbeIndex = lightProbeCons.lightProbeIndex;

	uint pixelRandomSeed = Camera.RandomSeed;
	uint sampleNum = 500;
	Ray.RandomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), Camera.TotalNumberOfSamples);

	for (uint s = 0; s < sampleNum; ++s)
	{
		
		vec3 rayColor = vec3(1);
		// Ray scatters are handled in this loop. There are no recursive traceRayEXT() calls in other shaders.
		vec2 uv = vec2(float(gl_LaunchIDEXT.x) / 1024.0, float(gl_LaunchIDEXT.y) / 1024.0) * 2.0 - 1.0;
		vec4 direction = vec4(mapToSphere(uv),0);
		vec4 origin = lightProbePos[lightProbeIndex];

		for (uint b = 0; b  <= Camera.NumberOfBounces; ++b)
		{
	
			const float tMin = 0.001;
			const float tMax = 10000.0;

			// If we've exceeded the ray bounce limit without hitting a light source, no light is gathered.
			// Light emitting materials never scatter in this implementation, allowing us to make this logical shortcut.
			if (b == Camera.NumberOfBounces) 
			{
				rayColor = vec3(0, 0, 0);
				break;
			}

			traceRayEXT(
				Scene, gl_RayFlagsOpaqueEXT, 0xff, 
				0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
				origin.xyz, tMin, direction.xyz, tMax, 0 /*payload*/);
			
			const vec3 hitColor = Ray.ColorAndDistance.rgb;
			const float t = Ray.ColorAndDistance.w;
			const bool isScattered = Ray.ScatterDirection.w > 0;

			//Capture in-direct light information
			if( b > 0)
			{
				rayColor *= hitColor;
			}

			// Trace missed, or end of trace.
			if (t < 0 || !isScattered)
			{				
				break;
			}

			// Trace hit.
			origin = origin + t * direction;
			direction = vec4(Ray.ScatterDirection.xyz, 0);
		}

		pixelColor += rayColor;
	}
	pixelColor = pixelColor / sampleNum;
	pixelColor = sqrt(pixelColor);
	imageStore(radianceOutputTexture[lightProbeIndex], ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
}

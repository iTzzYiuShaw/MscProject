#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require


#include "Heatmap.glsl"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1, rgba32f) uniform image2D AccumulationImage;
layout(binding = 2, rgba8) uniform image2D OutputImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

layout(binding = 9) readonly buffer LightProbePosBuffer
{ vec4 lightProbePos[];
};

layout(binding = 10) uniform sampler2D[] radianceProbeTexture;


layout(push_constant) uniform LightProbeConstants{
	uint numOfLightProbe;
    uint showProbeTexture;
    uint showRaytrace;
    uint currentProbeIndex;
} lightProbeCons;


layout(location = 0) rayPayloadEXT RayPayload Ray;


float signNotZero(in float k) {
    return (k >= 0.0) ? 1.0 : -1.0;
}

vec2 signNotZero(in vec2 v) {
    return vec2(signNotZero(v.x), signNotZero(v.y));
}


vec2 mapFromSphere(vec3 v) {

    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);
    vec2 result = v.xy * (1.0 / l1norm);
    if (v.z < 0.0) {
        result = (1.0 - abs(result.yx)) * signNotZero(result.xy);
    }
    return result;
}


void main() 
{

    if(lightProbeCons.showRaytrace == 1){
    
    
        const uint64_t clock = Camera.ShowHeatmap ? clockARB() : 0;

	    // Initialise separate random seeds for the pixel and the rays.
	    // - pixel: we want the same random seed for each pixel to get a homogeneous anti-aliasing.
	    // - ray: we want a noisy random seed, different for each pixel.
	    uint pixelRandomSeed = Camera.RandomSeed;
	    Ray.RandomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), Camera.TotalNumberOfSamples);

	    vec3 pixelColor = vec3(0);

	    // Accumulate all the rays for this pixels.
	    for (uint s = 0; s < Camera.NumberOfSamples; ++s)
	    {
		    //if (Camera.NumberOfSamples != Camera.TotalNumberOfSamples) break;
		    const vec2 pixel = vec2(gl_LaunchIDEXT.x + RandomFloat(pixelRandomSeed), gl_LaunchIDEXT.y + RandomFloat(pixelRandomSeed));
		    const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

		    vec2 offset = Camera.Aperture/2 * RandomInUnitDisk(Ray.RandomSeed);
		    vec4 origin = Camera.ModelViewInverse * vec4(offset, 0, 1);
		    vec4 target = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
		    vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance - vec3(offset, 0)), 0);
		    vec3 rayColor = vec3(1);

		    // Ray scatters are handled in this loop. There are no recursive traceRayEXT() calls in other shaders.
		    for (uint b = 0; b <= Camera.NumberOfBounces; ++b)
		    {
			    const float tMin = 0.001;
			    const float tMax = 10000.0;

			    // If we've exceeded the ray bounce limit without hitting a light source, no light is gathered.
			    // Light emitting materials never scatter in this implementation, allowing us to make this logical shortcut.
			    if (b == Camera.NumberOfBounces) 
			    {
				    rayColor = vec3(0, 0, 0);
				    break;
			    }

			    traceRayEXT(
				    Scene, gl_RayFlagsOpaqueEXT, 0xff, 
				    0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
				    origin.xyz, tMin, direction.xyz, tMax, 0 /*payload*/);
			
			    const vec3 hitColor = Ray.ColorAndDistance.rgb;
			    const float t = Ray.ColorAndDistance.w;
			    const bool isScattered = Ray.ScatterDirection.w > 0;

			    //rayColor *= hitColor;
			    if( b >= 0 || t < 0)
			    {
				    rayColor *= hitColor;
			    }

                

			    // Trace missed, or end of trace.
			    if (t < 0 || !isScattered)
			    {	
				    break;
			    }

			    // Trace hit.
			    origin = origin + t * direction;
			    direction = vec4(Ray.ScatterDirection.xyz, 0);
		    }

		    pixelColor += rayColor;
	    }

	    const bool accumulate = Camera.NumberOfSamples != Camera.TotalNumberOfSamples;
	    const vec3 accumulatedColor = (accumulate ? imageLoad(AccumulationImage, ivec2(gl_LaunchIDEXT.xy)) : vec4(0)).rgb + pixelColor;

	    pixelColor = accumulatedColor / Camera.TotalNumberOfSamples;

	    // Apply raytracing-in-one-weekend gamma correction.
	    pixelColor = sqrt(pixelColor);

	    if (Camera.ShowHeatmap)
	    {
		    const uint64_t deltaTime = clockARB() - clock;
		    const float heatmapScale = 1000000.0f * Camera.HeatmapScale * Camera.HeatmapScale;
		    const float deltaTimeScaled = clamp(float(deltaTime) / heatmapScale, 0.0f, 1.0f);

		    pixelColor = heatmap(deltaTimeScaled);
	    }

        imageStore(AccumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0));
        imageStore(OutputImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
    }else
    {


		//Generate a ray from camera
        const float tMin = 0.001;
        const float tMax = 10000.0;
        uint sizeOfLightProbe = lightProbeCons.numOfLightProbe;

       // Define a structure to hold probe information
        struct ProbeInfo {
            uint index;
            float weight;
            float dist;
            float angleWeight;
            vec4 direction;
        };

        // Array to hold the 2 closest probes
        uint targetProbeNum = 2;

        ProbeInfo selectedProbes[2];
        for (int i = 0; i < targetProbeNum; ++i) {
            selectedProbes[i].index = uint(-1);
            selectedProbes[i].weight = 0.0;
            selectedProbes[i].dist = tMax;
            selectedProbes[i].angleWeight = 0.0;
            selectedProbes[i].direction = vec4(0);
        }


	    // Get uv coordinate
        const vec2 pixel = vec2(gl_LaunchIDEXT.x,gl_LaunchIDEXT.y);
        const vec2 uv = (pixel/gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

	     // Calculate ray direction from the camera's perspective
        vec4 target = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
        vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance), 0);
    
        // camera's position
        vec4 origin = Camera.ModelViewInverse * vec4(0, 0, 0, 1);

        traceRayEXT(
            Scene, gl_RayFlagsOpaqueEXT, 0xff, 
            0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
            origin.xyz, tMin /*tMin*/, direction.xyz, tMax /*tMax*/, 0 /*payload*/);


        //Get hit color: Direct illumination
        float t = Ray.ColorAndDistance.w;
        vec3 hitColor = Ray.ColorAndDistance.rgb;
        vec3 hitPointNormal = Ray.normal.xyz;
        vec4 hitLocation = (origin + direction * t);
        vec4 cameraDirection = direction;

        vec3 accumulatedProbeColor = vec3(0);
        vec3 pixelColor = vec3(0);

        float totalWeight = 0;
        origin = hitLocation;
        uint testIndex = 0;

        //If hit something
        if(t > 0)
        {
        
            for (uint s = 0; s < sizeOfLightProbe; s++)
            {
            
                vec4 probePosition = lightProbePos[s];
                //Direction from hitpoint to lightprobe
                direction = normalize(probePosition - origin);

                //Blocking test
                traceRayEXT(
                    Scene, gl_RayFlagsOpaqueEXT, 0xff, 
                    0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
                    origin.xyz, tMin /*tMin*/, direction.xyz, tMax /*tMax*/, 0 /*payload*/);
        
                float tBlock = Ray.ColorAndDistance.w;
                vec4 normal = Ray.normal;

                //If there is an obstacle between hit point and light probe, then this light probe should be omitted
                if(tBlock < 0)
                { 
              
                    float dist = length(probePosition.xyz - hitLocation.xyz);   
                    float distanceWeight = 1.0 / (dist * dist + 1.0); // avoid 0
                    float angleWeight = max(dot(cameraDirection.xyz, -direction.xyz), 0.0);
                    float weight = distanceWeight * angleWeight;

                    // Check if this probe is one of the 2 probes with 2 highest weights
                    for (uint i = 0; i < targetProbeNum; ++i) {

                        if (weight > selectedProbes[i].weight) {
                            // Shift other probes
                            for (uint j = targetProbeNum-1; j > i; --j) {
                                selectedProbes[j] = selectedProbes[j - 1];
                            }

                            // Insert this probe
                            selectedProbes[i].index = s;
                            selectedProbes[i].weight = weight;
                            selectedProbes[i].dist = dist;
                            selectedProbes[i].angleWeight = angleWeight;
                            selectedProbes[i].direction = -direction;
                            break;
                        }
                    }

                }

            }

            // Accumulate the color from the 2 probes with hightest weight
            for (uint i = 0; i < targetProbeNum ; ++i) {

                if (selectedProbes[i].index != uint(-1)) {

                    totalWeight += selectedProbes[i].weight;

                    //Map 3D direction to 2D uv coordinate
                    vec2 octUV = mapFromSphere(selectedProbes[i].direction.xyz);
                    octUV = (octUV + 1) / 2;

                    //Sample light information from probe texture
                    vec3 probeColor = texture(radianceProbeTexture[selectedProbes[i].index], octUV).rgb;

                    accumulatedProbeColor += selectedProbes[i].weight * probeColor * hitColor;
                }
            }


            if (totalWeight > 0.0)
            {
                // Normalization
                accumulatedProbeColor /= totalWeight;
                pixelColor = accumulatedProbeColor;
            }else
            {
                pixelColor = hitColor;
            }
        }
    
        else //If missed, then render the sky
        {
            pixelColor = hitColor;
        }

        if(lightProbeCons.showProbeTexture == 1)
        {
            vec2 testUV = vec2(float(gl_LaunchIDEXT.x) / 1024.0, float(gl_LaunchIDEXT.y) / 1024.0);
            uint index = lightProbeCons.currentProbeIndex;
            pixelColor = texture(radianceProbeTexture[index], testUV).rgb;
        }

        imageStore(OutputImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
    }

}
